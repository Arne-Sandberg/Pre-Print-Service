#!/usr/bin/env python2.7
import os
from flask import Flask, request, Response, render_template
from werkzeug import secure_filename
from werkzeug.exceptions import abort, RequestEntityTooLarge

#from stl2stl import tweak, convert
import tempfile
import logging
import time
import argparse

app = Flask(__name__)

# If filesize is over 100MB, tweaking would lack due to perfomance issues.
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024


@app.route("/tweak", methods=['GET', 'POST'])
@app.route("/", methods=['GET', 'POST'])
def tweak_file():
    try:
        # Posting occurs if a file is submitted
        if request.method == 'POST':
            app.logger.debug("request: %s", request)
            # curpath = up to 'Pre-Print-Service' inclusively
            curpath = os.path.dirname(os.path.abspath(__file__))+os.sep

            # get filename
            print(list(request.files.items()))
            req_file = request.files['file']
            app.logger.debug("file: %s", req_file)

            # save as temporal file
            filename = secure_filename(req_file.filename)
            app.logger.info("secure filename: %s", filename)
            tmp = tempfile.gettempdir() + os.path.sep + str(time.time()) + "_tmp_" + filename
            req_file.save(tmp)
            print("tmp", tmp)
            app.logger.info("saved file %s", tmp)

            # Convert model
            ret = os.popen("python3 {}Tweaker3{}Tweaker.py -i {} -c -o {}tmpoutfile.stl"
                           .format(curpath, os.sep, tmp, curpath))
            if ret.read() == "":
                app.logger.info("Tweaking was successful")
                print("Tweaking was successful")
            else:
                app.logger.warning("Tweaking was executed with warning %s",
                                   ret.read())
                print(ret.read())
            print(ret.read())

            print(curpath)
            outfile = open("{}tmpoutfile.stl".format(curpath))

            tweaked = outfile.read()
            os.remove(tmp)
            os.remove("{}tmpoutfile.stl".format(curpath))
            app.logger.info("removed temporary file %s", tmp)
            try:
                app.logger.info("tweaked length: %s", len(tweaked))
            except:
                app.logger.error("tweaked length: ValueError: View function did not return a response")

            req_file = request.files['file']
            app.logger.debug("file: %s", req_file)

            filename = secure_filename(req_file.filename)
            app.logger.info("secure filename: %s", filename)
            tmp = tempfile.gettempdir() + os.path.sep + str(time.time()) + "_tmp_" + filename
            req_file.save(tmp)
            app.logger.info("saved file %s", tmp)

            ret = os.popen("python {}Tweaker-3{}Tweaker.py -i {} -x -o {}tmpoutfile.stl "
                                    .format(curpath, os.sep, tmp, curpath))
            if ret.read() == "":
                app.logger.info("Tweaking was successful")
            else:
                app.logger.warning("Tweaking was executed with warning %s",
                                   ret.read())
                print(ret.read())

            outfile = open("{}tmpoutfile.stl".format(curpath))
            tweaked = outfile.read()

            os.remove(tmp)
            os.remove("{}tmpoutfile.stl".format(curpath))
            app.logger.info("removed temporary file %s", tmp)
            try:
                app.logger.info("tweaked length: %s", len(tweaked))
            except:
                app.logger.error("tweaked length: ValueError: View function did not return a response")

            if request.headers.get('Accept') == "text/plain":
                response = Response(tweaked)
            else:
                response = Response(tweaked, mimetype='application/octet-stream')
                response.headers['Content-Disposition'] = "inline; filename=tweaked_" + filename.split(".")[0] + ".stl"
            response.headers['Access-Control-Allow-Origin'] = "*"
            return response
        else:
            return render_template('tweak.html')
    except RequestEntityTooLarge:
        abort(413)
    except Exception:
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='STL Tweaking Service.')
    parser.add_argument("-p", dest="port", help="port to listen on default: 5000", default="5000")
    parser.add_argument("-l", dest="logfile", help="logfile, default: None", default=None)
    args = parser.parse_args()

    if args.logfile:
        fmt = "%(asctime)s %(levelname)s %(filename)s:%(lineno)d %(message)s"
        level = logging.DEBUG
        logging.basicConfig(format=fmt, filename=args.logfile, level=level)

    app.run(host="0.0.0.0", port=int(args.port))
